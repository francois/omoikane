#!/usr/bin/env ruby
require "bundler"
Bundler.require :default, :worker

require "csv"
require "zlib"

$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)
require "omoikane/jobsdb"
require "omoikane/targetdb"
require "models/query"

JOBSDIR = ARGV.shift or raise("Missing JOBSDIR as 1st argument")
raise "#{JOBSDIR.inspect} is not a directory: can't continue" unless File.directory?(JOBSDIR)

JOBID = ARGV.shift or raise("Missing JOBID as 2nd argument")

QUERY = Query[JOBID]
QUERY.started!

def explain
  logger.info "Explaining query #{JOBID}"
  plan = begin
           ds = TARGETDB["EXPLAIN /* #{JOBID} */ #{QUERY.sql} ;"]
           ds.select_map(:"QUERY PLAN")
         rescue Sequel::DatabaseError => e
           logger.warn "#{e.class}: #{e.message}"
           QUERY.set_error!(e.message)
           exit 1
         end

  logger.info "Explained query #{JOBID}"
  QUERY.set_plan!(plan.join("\n"))
  QUERY.explained!
end

def run
  logger.info "Running query #{JOBID}"

  columns = nil
  rows_count = 0
  results_path = File.join(JOBSDIR, "#{JOBID}.csv.gz")
  Zlib::GzipWriter.open(results_path) do |io|
    CSV(io) do |csv|
      ds = TARGETDB["/* #{JOBID} */ #{QUERY.sql} ;"]
      ds.each do |row|
        columns = row.keys unless columns
        rows_count += 1
        csv << row.values
      end
    end
  end

  logger.info "Found #{columns.size} columns in #{rows_count} rows (#{columns.to_csv.chomp})"
  QUERY.set_results!(results_path, rows_count, columns)
end

explain
run

# Success!
exit 0
